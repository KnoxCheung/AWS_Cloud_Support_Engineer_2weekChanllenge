# template.yaml
AWSTemplateFormatVersion: '2010-09-09'
Description: 'Multi-language Support API Stack'

Resources:
  # DynamoDB Table
  LanguageTable:
    Type: 'AWS::DynamoDB::Table'
    Properties:
      TableName: LanguageContent
      BillingMode: PAY_PER_REQUEST  # Cost-effective, no upfront capacity needed
      AttributeDefinitions:
        - AttributeName: message_id
          AttributeType: S
        - AttributeName: language
          AttributeType: S
      KeySchema:
        - AttributeName: message_id
          KeyType: HASH
        - AttributeName: language
          KeyType: RANGE

  # Lambda Function
  LambdaFunction:
    Type: 'AWS::Lambda::Function'
    Properties:
      FunctionName: multi-language-api
      Runtime: python3.9
      Handler: index.lambda_handler
      Code:
        ZipFile: |
          import json
          import boto3
          from boto3.dynamodb.conditions import Key

          dynamodb = boto3.resource('dynamodb')
          table = dynamodb.Table('LanguageContent')

          def lambda_handler(event, context):
              try:
                  params = event.get('queryStringParameters', {}) or {}
                  message_id = params.get('message_id', 'welcome')
                  language = params.get('language', 'en')

                  if language not in ['en', 'ja', 'zh']:
                      return {
                          'statusCode': 400,
                          'body': json.dumps({
                              'error': f'Unsupported language: {language}'
                          })
                      }

                  response = table.get_item(
                      Key={
                          'message_id': message_id,
                          'language': language
                      }
                  )

                  message = response.get('Item', {}).get('content',
                      'Message not found')

                  return {
                      'statusCode': 200,
                      'headers': {
                          'Content-Type': 'application/json',
                          'Access-Control-Allow-Origin': '*'
                      },
                      'body': json.dumps({
                          'message': message,
                          'language': language
                      })
                  }

              except Exception as e:
                  return {
                      'statusCode': 500,
                      'body': json.dumps({
                          'error': str(e)
                      })
                  }
      Role: !GetAtt LambdaRole.Arn
      Timeout: 10
      MemorySize: 128  # Minimum memory for cost effectiveness

  # IAM Role for Lambda
  LambdaRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: DynamoDBAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:GetItem
                Resource: !GetAtt LanguageTable.Arn

  # API Gateway
  Api:
    Type: 'AWS::ApiGateway::RestApi'
    Properties:
      Name: multi-language-api

  ApiResource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      ParentId: !GetAtt Api.RootResourceId
      PathPart: 'message'
      RestApiId: !Ref Api

  ApiMethod:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      HttpMethod: GET
      ResourceId: !Ref ApiResource
      RestApiId: !Ref Api
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub
          - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaArn}/invocations
          - lambdaArn: !GetAtt LambdaFunction.Arn

  ApiDeployment:
    Type: 'AWS::ApiGateway::Deployment'
    DependsOn: ApiMethod
    Properties:
      RestApiId: !Ref Api

  ApiStage:
    Type: 'AWS::ApiGateway::Stage'
    Properties:
      DeploymentId: !Ref ApiDeployment
      RestApiId: !Ref Api
      StageName: prod

Outputs:
  ApiEndpoint:
    Description: 'API Endpoint'
    Value: !Sub '<https://$>{Api}.execute-api.${AWS::Region}.amazonaws.com/prod/message'
